Swish

Author: 
    Alexander Lamaison <awl03@doc.ic.ac.uk>

What is Swish?
    Swish is a plugin for Microsoft Windows Explorer that integrates access to 
    remote files via SSH/SFTP.
    
Status:
    ********************************************************************
    In this version, Swish can only perform simple tasks such as renaming
    and deleting files on the remote server. It cannot access their contents.
    ********************************************************************
    
    The architecture of Swish is divided into a back-end and a front-end.  The
    former deals with the SFTP connection to remote hosts while the latter
    is concerned with displaying the results to the user and handling 
    interaction.
    
    The current Swish backend is based on libssh2 (http://www.libssh2.org).
    While the eventual aim is to offer a choice of back-end implementations
    with different capabilities, this is currently the only one.
    
    Currently, Swish can only perform password-based authentication. Also, as
    it lacks the ability to authenticate a host's key it will BLINDLY CONNECT
    TO ANY HOST YOU SPECIFY - *WATCH OUT*! Adding host-key authentication is
    a priority.

Supported Operating Systems:
    Windows XP   (most tested)
    Windows 2000 (regularly tested)
    Windows Me   (rarely tested)
    Windows 98   (regularly tested)
    
    Unfortunately, Windows 95 and NT 4 are not immediately supported.  This is
    because the C runtime used when compiling with Visual Studio 2005 is
    no longer compatible with their API. There are a few ways you can work round
    this if you wish:
     - Compile Swish using Visual Studio 2005.  You may have to fix the code to
       allow this; I've never tried it.
     - Make *all* the projects statically link to the runtime library (/MT). 
       In addition you will have to use a version of OpenSSL similarly linked
       so you will have to compile your own. The instructions that come with
       OpenSSL make it clear how to do this. Again, I haven't tried this myself
       so it might not work.

Building:
    There is currently an issue with the build process that means you may need
    to build it two or three times before all the components are fully built.
    The second time around it will appear to have built all parts but in fact 
    hasn't.  Just keep choosing Build until there is no more to be done.
    
    Vista: When building on Windows Vista, make sure you are running Visual
    Studio as an Administrator.  Otherwise it can't register the components
    and later components that depends on earlier ones will fail to build.

Requirements to run:
    Internet Explorer 5.5 or greater
        (may work with 5.01 but required SHRegGetPath() function seems broken).
    For Windows 9x, the Microsoft Layer for Unicode (MSLU, aka Unicows)
        http://www.microsoft.com/downloads/details.aspx?FamilyId=73BA7BD7-ED06-
        4F0D-80A4-2A7EEAEE17E2&displaylang=en.

Requirements to build:
    Visual C++ 2005 (Express edition is unlikely to work as the code uses
        ATL attributes which, I believe, require ATL 7).
    A recent version of the Windows SDK 
        (http://msdn.microsoft.com/en-us/windowsvista/bb980924.aspx)
    WTL 8 which can be obtained from Microsoft of through SourceForge
        Microsoft Permissive Licence: http://www.microsoft.com/downloads/
        details.aspx?familyid=E5BA5BA4-6E6B-462A-B24C-61115E846F0C
        Common Public Licence: http://sourceforge.net/projects/wtl/.
    
    For the Libssh2Provider backend:
     - libssh2
     - OpenSSL
     - zlib
    The directories to put the sourcecode for these dependencies in should
    already exist in the Libssh2Provider/ directory.
    
    libssh2 can be obtained from http://www.libssh2.org.  Either the latest
    release (0.18) or the CVS head appear to work.  You can get OpenSSL from
    http://www.openssl.org and compile it yourself but a much easier option
    is to download my pre-packaged binary with just the stuff needed for Swish:
    http://downloads.sourceforge.net/swish/openssl-0.9.8g-swish.zip?download.
    zlib binaries are available at http://www.zlib.net/.
    
    Assuming you have the necessary tools available on your PATH (probably by 
    installing cygwin), the easiest way to set everything up is to run the 
    following commands in the Libssh2Provider/ directory:
    
      cvs -d :pserver:libssh2.cvs.sourceforge.net:/cvsroot/libssh2 co libssh2
      wget "http://prdownloads.sourceforge.net/libpng/zlib123-dll.zip?download"
      unzip -d zlib zlib123-dll.zip
      rm zlib123-dll.zip
      wget "http://downloads.sourceforge.net/swish/openssl-0.9.8g-swish.zip?download"
      unzip -d openssl openssl-0.9.8g-swish.zip
      rm openssl-0.9.8g-swish.zip
    
    and, if you do not have WTL installed elsewhere, run the following in the
    top-level Swish directory:
    
      mkdir wtl
      cd wtl
      wget "http://downloads.sourceforge.net/wtl/WTL80_7161_Final.zip?download"
      unzip WTL80_7161_Final.zip
      rm WTL80_7161_Final.zip
      cd ..

Requirements for testing:
    CppUnit (works with v1.12.0, may work with other versions) must be present
    on the local machine.  Many tests also require a remote host available to
    connect to over SSH.  Swish assumes this is unix-based and that the test
    user account has a home directory named /home/username.
    
    Environment variables:
    CPPUNITDIR: The location of the CppUnit files.
    TEST_HOST_NAME: The name of the remote testing host.
    TEST_USER_NAME: The user name of the SSH account on the remote host.
    TEST_HOST_PORT: The port on the remote host that SSH is listening on 
        (optional - defaults to 22 if not set).
    TEST_PASSWORD:  The password to use to connect to the remote host if 
                    required.
    
    If you are going to run the tests I **STRONGLY** recommend using a separate
    user account for them as they create and delete files and, being tests, have
    the potential to invoke disastrous code.  Protect yourself from them!

OpenSSL:
    This product includes software developed by the OpenSSL Project for use in 
    the OpenSSL Toolkit (http://www.openssl.org/)
    
    This product includes cryptographic software written by Eric Young 
    (eay@cryptsoft.com)

$Id$